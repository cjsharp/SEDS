C51 COMPILER V9.00   CONTROL_BOX_FIRMWARE_MOSTRECENT                                       11/04/2017 13:42:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE CONTROL_BOX_FIRMWARE_MOSTRECENT
OBJECT MODULE PLACED IN .\Objects\control_box_firmware_mostrecent.obj
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE ..\..\..\..\control_box_firmware_mostrecent.c LARGE OPTIMIZE(9,SIZE) BRO
                    -WSE DEBUG OBJECTEXTEND PRINT(.\Listings\control_box_firmware_mostrecent.lst) OBJECT(.\Objects\control_box_firmware_mostr
                    -ecent.obj)

line level    source

   1          //battery
   2          //crc_check
   3          //oled communication
   4          //tones
   5          //communication timeout
   6          
   7          //matts board
   8          /*************************************************************************
   9           *  @File Descption: Read states of manual override buttons of control_box
  10           *      and bi-directional communication via UART with main_board.
  11           *      @File: control_box_firmware.c
  12           *  @author(s):
  13           *  -Tawfic Rabbani, Embedded Systems Engineer, head of software
  14           *      -Matthew Santos, Electrical and Firmware Engineer
  15           *  @Property of SEDS UCSD
  16           *  @since: 10/2016
  17           *************************************************************************/
  18          //#include "reg60s2.h" //Include reg file for 8051 architecure
  19          #include "STC/STC12C5A60S2.H"
  20          #include "intrins.h" //for ADC
  21          #include "crc.h" //for crc generator
  22          #include "math.h"
  23          #define OUT_COUNT 18 //1 override + 14 solenoidstates + 1 encoder + 2 crc
  24          #define IN_COUNT 73 //1 override + 14 solenoidstates + 56 IN_DAQ COUNT + 2 crc
  25          #define OLED_COUNT 63 //1 override + 1 tone + 2 battlvl + 3 commsgood + 56 IN_DAQ COUNT
  26          #define STARTKEY 0x55 //indicates beginning of an array message
  27          #define NUM_SWITCHES 12
  28          #define COM_TIMEOUT 2400        //how long communications must cease to warn user in units of 1.25 ms
  29          /*Define UART operation const*/
  30          #define FOSC 11059200L //system oscillator frequency
  31          #define BAUD 9600 //baud rate
  32          #define S2RI 0x01 //S2CON.0
  33          #define S2TI 0x02 //S2CON.1
  34          /*Define ADC operation const for ADC_CONTR*/
  35          #define ADC_POWER   0x80 //ADC power control bit
  36          #define ADC_FLAG    0x10 //ADC complete flag
  37          #define ADC_START   0x08 //ADC start control bit
  38          #define ADC_SPEEDLL 0x00 //540 clocks
  39          #define ADC_SPEEDL  0x20 //360 clocks
  40          #define ADC_SPEEDH  0x40 //180 clocks
  41          #define ADC_SPEEDHH 0x60 //90 clocks
  42          
  43          /*************************************************************************
  44           *                            -- VARIABLES --
  45           *  Each variable is a pin on the MCU that can be read/write 1/0.
  46           *  Syntax:
  47           *       varaible-type  variable-name = pin;
  48           *************************************************************************/
  49          //sfr P4SW = 0xBB; //special register for using P4 pins as I/O
  50          //sfr BRT = 0x9C; //special register for using baud rate timer
  51          
  52          sbit LED1 = P0^0;
  53          sbit LED2 = P0^1;
C51 COMPILER V9.00   CONTROL_BOX_FIRMWARE_MOSTRECENT                                       11/04/2017 13:42:09 PAGE 2   

  54          sbit LED3 = P0^2;
  55          sbit LED4 = P0^3;
  56          sbit LED5 = P0^4;
  57          sbit LED6 = P0^5;
  58          sbit LED12 = P0^6;
  59          sbit LED11 = P0^7;
  60          
  61          sbit E0 = P1^0; //encoder pin 0
  62          sbit E1 = P1^1; //encoder pin 1
  63          
  64          sbit GPIO1 = P1^4;
  65          sbit GPIO2 = P1^5;
  66          sbit BATTLVL = P1^6; //analog voltage reading of battery
  67          sbit sw1 = P1^7;
  68          
  69          sbit LED7 = P2^7;
  70          sbit sw12 = P2^6;
  71          sbit sw11 = P2^5;
  72          sbit sw10 = P2^4;
  73          sbit sw9 = P2^3;
  74          sbit sw8 = P2^2;
  75          sbit swTOG = P2^1; //main override toggle switch
  76          sbit LEDtog = P2^0; //main override indicator
  77          
  78          sbit sw2 = P3^2;
  79          sbit sw3 = P3^3;
  80          sbit sw4 = P3^4;
  81          sbit sw5 = P3^5;
  82          sbit sw6 = P3^6;
  83          sbit sw7 = P3^7;
  84          
  85          sbit LED10 = P4^6;
  86          sbit LED9 = P4^5;
  87          sbit LED8 = P4^4;
  88          
  89          /*************************************************************************
  90           *                           --PROTOTYPES--
  91           *************************************************************************/
  92          void uart_init(); //Initialize UART1 and UART2 sfr
  93          void uart1_tx(unsigned char dat); //UART1 transmit single byte
  94          void send(); //UART1 send output array
  95          void uart2_tx(unsigned char dat); //UART2 transmit single byte
  96          void update_OLED(); //update OLED
  97          void adc_init(); //Initialize ADC sfr
  98          void timer0_init(); //Initialize Timer0 sfr
  99          void CRC_generator();
 100          void button_check();
 101          void update_LEDS();
 102          unsigned char readBattery(unsigned char ch);
 103          bit CRC_check();
 104          
 105          /*************************************************************************
 106           *                          --GLOBAL VARIABLES--
 107           *************************************************************************/
 108          /* Communication Arrays */
 109          //sequencestage,criticaldata,errormessages is just forwarded from input to arduino
 110          unsigned char input[IN_COUNT]; //stores all recieved inputs
 111          /* [0,override][1-14,solenoid states][13-16,errors][17-20,warnings][21-24,pressure valves][25-26,crc] */
 112          //SOLENOIDSTATES CAN BE 0=INACTIVE, 1=ACTIVE, 2=PENDING
 113          unsigned char output[OUT_COUNT]; //stores all commands to be sent
 114          /* [0,override][1-14,buttonpresses][5,encoder][6-7,crc] */
 115          unsigned char oled[OLED_COUNT]; //stores info for oled to display
C51 COMPILER V9.00   CONTROL_BOX_FIRMWARE_MOSTRECENT                                       11/04/2017 13:42:09 PAGE 3   

 116          /* [0,override][1,tone][2,battlvl][3,commsgood][4,thrust][5,tank1p][6,tank1t][7,tank2p][8,tank2t][9-12,kbo
             -t1-4][13-22,errormessages] */
 117          //TONE CAN BE 0=none, 1=buttonpress, 2=overrideswitch, 3=error
 118          
 119          unsigned int i = 0; //for loops
 120          unsigned int timerCounter = 0; //for timer0 isr
 121          unsigned int comCounter = 0;
 122          bit inputChanged = 0;
 123          bit busy = 0; //boolean for UART TX holding
 124          bit storing = 0; //1 if currently updating RX array, 0 otherwise
 125          bit readSwitchesFlag = 0; //1 if input data has been updated, 0 otherwise
 126          bit updateLEDFlag = 0;
 127          bit checkCRC=0;
 128          unsigned char com;
 129          unsigned char ch = 6; //ADC channel number for BATTLVL
 130          unsigned char LED[NUM_SWITCHES+1];
 131          unsigned char lastState[NUM_SWITCHES+1];
 132          unsigned char currentState[NUM_SWITCHES+1];
 133          unsigned char debounceFlag[NUM_SWITCHES+1];
 134          unsigned char debounceCounter[NUM_SWITCHES+1];
 135          unsigned char LEDState=0;
 136          unsigned int index = 0; //for UART RX array location
 137          
 138          /*----------------------------
 139          Main loop.
 140          Initializes MCU registers, checks for constant communication,
 141          reads switches and buttons, sends commands with crc, updates
 142          leds and oled with new info.
 143          ----------------------------*/
 144          void main() {
 145   1              P4SW = 0x70; //enable IO for all of P4
 146   1              crc_init(); //Initialize look up table for CRC
 147   1              uart_init(); //Initialize UART1 and UART2 sfr.
 148   1              adc_init(); //Initialize ADC sfr
 149   1              timer0_init(); //Initialize Timer0 sfr
 150   1              EA = 1; //Open master interrupt switch
 151   1              while(1) { //loop forever
 152   2      //              for(i=0;i<=1000;i++){nop_();}
 153   2                      if(readSwitchesFlag==1 /*&& checkCRC==1*/){button_check(); readSwitchesFlag=0;} 
 154   2                      if(updateLEDFlag==1 /*&& checkCRC==1*/){update_LEDS();} 
 155   2      //METHOD TO COPY INPUT STATES TO OUTPUT STATES
 156   2                      send(); //transmit output
 157   2                      ////////////////////////////////////////////////////////////////////////////////////////////////////////
             -////////
 158   2                      if(inputChanged==1){
 159   3                      inputChanged=0;
 160   3                              uart1_tx(0x77);
 161   3                              for(i = 0; i < IN_COUNT; i++) {  //send entire output array 
 162   4                                      uart1_tx(input[i]);                      //include "override" char so that control board knows 
 163   4                              }                                                                        //if it is interpreting solenoid state values
 164   3                      }
 165   2                       ///////////////////////////////////////////////////////////////////////////////////////////////////////
             -////////// 
 166   2      //              if ((LEDState%2)&1==0 && CRC_check()==1){update_OLED();} //update OLED
 167   2              } //end while
 168   1      } //end main
 169          
 170          /*----------------------------
 171          Check crc of input array.
 172          1 if good data, 0 otherwise.
 173          ----------------------------*/
 174          bit CRC_check() {
C51 COMPILER V9.00   CONTROL_BOX_FIRMWARE_MOSTRECENT                                       11/04/2017 13:42:09 PAGE 4   

 175   1              unsigned short crcval = crcFast(input, IN_COUNT-2); //compute the crc value from input array up to the ac
             -tual crc elements
 176   1              if(((unsigned char)(crcval>>8) == input[IN_COUNT-2])
 177   1                      && ((unsigned char)(crcval) == input[IN_COUNT-1])) {
 178   2                              return 1;
 179   2              }
 180   1              return 0;
 181   1      }
 182          
 183          /*----------------------------
 184          Append crc bytes to end of output array.
 185          ----------------------------*/
 186          void CRC_generator() {
 187   1              unsigned short crcval = crcFast(output, OUT_COUNT-2); //compute the crc value from output array up to the
             - actual crc elements
 188   1              output[OUT_COUNT-2] = (unsigned char)(crcval>>8); //append the first byte of the crcvalue to the output a
             -rray
 189   1              output[OUT_COUNT-1] = (unsigned char)(crcval); //append the second byte of the crcvalue to the output arr
             -ay
 190   1      }
 191          
 192          /*----------------------------
 193          Update OLED screen with info.
 194          ----------------------------*/
 195          void update_OLED() {                                                    //update array:
 196   1              oled[0] = output[0];            //override                                         
 197   1                                                                      //tone doesn't need to be updated, updated elsewhere in code
 198   1              oled[2] = readBattery(1);       //battery level
 199   1                                                                      //communication updated elsewhere
 200   1              oled[1] = com;                          
 201   1              
 202   1              for(i = 0; i < OLED_COUNT; i++) {uart2_tx(oled[i]);}            //send the oled array
 203   1              oled[3]=0;                                                                      //set tone back to zero
 204   1      }
 205          
 206          /*----------------------------
 207          Initialize UART1 and UART2 sfr.
 208          Data buffer is set to 8 bit length,
 209          baud rate set to 9600 baud,
 210          uart interrupt is enabled.
 211          ----------------------------*/
 212          void uart_init() {
 213   1              SCON = 0x50; //8-bit variable UART1
 214   1              TMOD = 0x21; //timer1 in mode2. timer0 in mode1
 215   1              TH1 = TL1 = -(FOSC/12/32/BAUD); //Set auto-reload vaule
 216   1              TR1 = 1; //Timer 1 enable
 217   1              ES = 1; //Enable UART interrupt
 218   1              
 219   1              S2CON = 0x50; //8-bit variable UART2
 220   1              BRT = -(FOSC/32/BAUD); //Set auto-reload vaule of baudrate generator
 221   1              AUXR = 0xF5; //see datashee pg185
 222   1              IE2 = 0x01; //Enable UART2 interrupt
 223   1              
 224   1              for(i = 0; i < OUT_COUNT; ++i) //initialize output array to zeros
 225   1                      output[i] = 0;
 226   1              for(i = 0; i < IN_COUNT; ++i) //initialize input array to zeros
 227   1                      input[i] = 0;
 228   1              for(i = 0; i < OLED_COUNT; ++i) //initialize oled array to zeros
 229   1                      oled[i] = 0;
 230   1      }
 231          
 232          /*----------------------------
C51 COMPILER V9.00   CONTROL_BOX_FIRMWARE_MOSTRECENT                                       11/04/2017 13:42:09 PAGE 5   

 233          UART1 interrupt routine.
 234          Updates the input array.
 235          ----------------------------*/
 236          void Uart_Isr() interrupt 4 using 1 {
 237   1              unsigned char c;
 238   1              if(RI) { //receive1 flagged
 239   2                      RI = 0; //reset receive flag
 240   2                      c = SBUF; //store buffer in c
 241   2                      if(storing) { //we are in storing mode
 242   3                              input[index] = c; //store SBUF in current index of array
 243   3                              index++; //increment array index
 244   3                      } else if(c == STARTKEY) { //start key is received
 245   3                              storing = 1; //set that we are now storing
 246   3                              index = 0; //start from beginning of array by resetting index
 247   3                      }
 248   2                      if(index >= IN_COUNT) { //read in enough values
 249   3                              storing = 0; //set that we are done storing
 250   3                              inputChanged = 1; //tell the program that new data has been delivered
 251   3      //                      checkCRC=CRC_check();
 252   3                      }       
 253   2              }       
 254   1              if(TI) { //transmit1 flagged
 255   2                      TI = 0; //Clear transmit interrupt flag
 256   2                      busy = 0; //Clear transmit busy flag
 257   2              }
 258   1      }
 259          
 260          /*----------------------------
 261          UART1 transmit single byte
 262          ----------------------------*/
 263          void uart1_tx(unsigned char dat) {
 264   1              while(busy); //Wait for the completion of the previous data is sent
 265   1              busy = 1; //set transmit busy flag
 266   1              SBUF = dat; //Send data to UART buffer
 267   1      }
 268          
 269          /*----------------------------
 270          UART1 send output array
 271          ----------------------------*/
 272          void send() {
 273   1              uart1_tx(STARTKEY);
 274   1              CRC_generator(); //append crc to end of output 
 275   1              for(i = 0; i < OUT_COUNT; ++i) {uart1_tx(output[i]);}
 276   1      }
 277          
 278          /*----------------------------
 279          UART2 interrupt routine
 280          ----------------------------*/
 281          void Uart2() interrupt 8 using 1 {
 282   1          if(S2CON & S2RI) { //Does nothing with received data
 283   2              S2CON &= ~S2RI; //Clear receive interrupt flag
 284   2          }
 285   1          if(S2CON & S2TI) { //transmit2 flagged
 286   2              S2CON &= ~S2TI; //Clear transmit interrupt flag
 287   2              busy = 0; //Clear transmit busy flag
 288   2          }
 289   1      }
 290          
 291          /*----------------------------
 292          UART2 transmit single byte
 293          ----------------------------*/
 294          void uart2_tx(unsigned char dat) {
C51 COMPILER V9.00   CONTROL_BOX_FIRMWARE_MOSTRECENT                                       11/04/2017 13:42:09 PAGE 6   

 295   1          while(busy); //Wait for the completion of the previous data is sent
 296   1          busy = 1; //set transmit flag to busy
 297   1          S2BUF = dat; //Send data to UART2 buffer
 298   1      }
 299          
 300          /*----------------------------
 301          Initialize ADC sfr
 302          ----------------------------*/
 303          void adc_init() {
 304   1              P1ASF = 0x03; //set P1.0 and P1.1 as analog input ports
 305   1              ADC_RES = 0; //Clear previous result
 306   1              ADC_CONTR = ADC_POWER | ADC_SPEEDLL; //set register
 307   1              for(i=0;i<10;i++){nop_();} //ADC power-on delay and Start A/D conversion
 308   1              IE = 0xb0; //Enable ADC and UART interrupt and Open master interrupt switch
 309   1      }
 310          
 311          /*----------------------------
 312          Initialize Timer0 sfr
 313          ----------------------------*/
 314          void timer0_init() {
 315   1              TL0 = 0xFF; //initialize timer0 low byte          65535-(11059200/12/800)=FB7F
 316   1              TH0 = 0xED; //initialize timer0 high byte
 317   1              TR0 = 1; //timer0 start running
 318   1              ET0 = 1;} //enable timer0 interrupt
 319          
 320          
 321          void debounce(char index){
 322   1              if (debounceFlag[index]==1 && currentState[index]==1 && lastState[index]==1){
 323   2                      debounceCounter[index]++;}
 324   1              else if (debounceFlag[index]==1 && currentState[index]==0 && lastState[index]==1 && debounceCounter[index
             -]>=3){
 325   2                      debounceFlag[index]=0; debounceCounter[index]=0;
 326   2                      if (output[index]==0){output[index]=1;}
 327   2                      else if (output[index]==1){output[index]=0;}}
 328   1              else if (currentState[index]==1 && lastState[index]==0){
 329   2                      debounceFlag[index]=1;}
 330   1              else if (currentState[index]==0 && lastState[index]==1){
 331   2                      debounceFlag[index]=0; debounceCounter[index]=0;}
 332   1              lastState[index]=currentState[index];}
 333          
 334          void button_check(){
 335   1              for(i=1; i<=NUM_SWITCHES;i++){debounce(i);}
 336   1              output[0]=swTOG;
 337   1              currentState[1]=sw1;    
 338   1              currentState[2]=sw2;
 339   1              currentState[3]=sw3;
 340   1              currentState[4]=sw4;
 341   1              currentState[5]=sw5;
 342   1              currentState[6]=sw6;
 343   1              currentState[7]=sw7;
 344   1              currentState[8]=sw8;
 345   1              currentState[9]=sw9;
 346   1              currentState[10]=sw10;
 347   1              currentState[11]=sw11;
 348   1              currentState[12]=sw12;
 349   1      //      sw13=currentState[13];
 350   1      //      sw14=currentState[14];
 351   1      }
 352          
 353          void update_LEDS(){
 354   1              LEDtog=input[0]&1;
 355   1              if (input[1] <= 1){LED1=!input[1]&1;}
C51 COMPILER V9.00   CONTROL_BOX_FIRMWARE_MOSTRECENT                                       11/04/2017 13:42:09 PAGE 7   

 356   1              else {LED1=(LEDState%2)&1;}
 357   1              if (input[2] <= 1){LED2=!input[2]&1;}
 358   1              else {LED2=(LEDState%2)&1;}
 359   1              if (input[3] <= 1){LED3=!input[3]&1;}
 360   1              else {LED3=(LEDState%2)&1;}
 361   1              if (input[4] <= 1){LED4=!input[4]&1;}
 362   1              else {LED4=(LEDState%2)&1;}
 363   1              if (input[5] <= 1){LED5=!input[5]&1;}
 364   1              else {LED5=(LEDState%2)&1;}
 365   1              if (input[6] <= 1){LED6=!input[6]&1;}
 366   1              else {LED6=(LEDState%2)&1;}
 367   1              if (input[7] <= 1){LED7=!input[7]&1;}
 368   1              else {LED7=(LEDState%2)&1;}
 369   1              if (input[8] <= 1){LED8=!input[8]&1;}
 370   1              else {LED8=(LEDState%2)&1;}
 371   1              if (input[9] <= 1){LED9=!input[9]&1;}
 372   1              else {LED9=(LEDState%2)&1;}
 373   1              if (input[10] <= 1){LED10=!input[10]&1;}
 374   1              else {LED10=(LEDState%2)&1;}
 375   1              if (input[11] <= 1){LED11=!input[11]&1;}
 376   1              else {LED11=(LEDState%2)&1;}
 377   1              if (input[12] <= 1){LED12=!input[12]&1;}
 378   1              else {LED12=(LEDState%2)&1;}
 379   1      //      if (input[13] <= 1){LED13=!input[13]&1;}
 380   1      //      else {LED13=(LEDState%2)&1;}
 381   1      //      if (input[14] <= 1){LED14=!input[14]&1;}
 382   1      //      else {LED14=(LEDState%2)&1;}
 383   1      }
 384          
 385          /*----------------------------
 386          Timer0 interrupt routine
 387          ----------------------------*/
 388          void tm0_isr() interrupt 1 using 1 {
 389   1              TL0 = 0xFF;   //initialize timer0 low byte       65535-(11059200/12/200)=EDFF
 390   1              TH0 = 0xED;   //initialize timer0 high byte
 391   1              timerCounter++;
 392   1              readSwitchesFlag=1;
 393   1              if (inputChanged==0){
 394   2                      comCounter++;
 395   2                      if(comCounter>=COM_TIMEOUT){
 396   3                              com=1;}}
 397   1              else{comCounter=0; inputChanged=0; com=0;}
 398   1              if(timerCounter%200==0){updateLEDFlag=1; LEDState++;}
 399   1              if(timerCounter==800){timerCounter=0;}}
 400          
 401          
 402          unsigned char readBattery(unsigned char ch){
 403   1          ADC_CONTR = ADC_POWER | ADC_SPEEDLL | ch | ADC_START;
 404   1          _nop_(); _nop_(); _nop_(); _nop_(); 
 405   1          while (!(ADC_CONTR & ADC_FLAG));//Wait complete flag
 406   1          ADC_CONTR &= ~ADC_FLAG;         //Close ADC
 407   1          return ADC_RES;}                //Return ADC result


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1664    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    742      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
C51 COMPILER V9.00   CONTROL_BOX_FIRMWARE_MOSTRECENT                                       11/04/2017 13:42:09 PAGE 8   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
